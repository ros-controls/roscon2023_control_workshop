// Copyright (c) 2023, ros2_control development team
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef TWIST_RELAY_CONTROLLER__TWIST_RELAY_CONTROLLER_HPP_
#define TWIST_RELAY_CONTROLLER__TWIST_RELAY_CONTROLLER_HPP_

#include <memory>

#include <realtime_tools/realtime_box.h>
#include <controller_interface/chainable_controller_interface.hpp>
#include <geometry_msgs/msg/twist_stamped.hpp>

// auto-generated by generate_parameter_library
#include "twist_relay_controller_parameters.hpp"

namespace twist_relay_controller
{
using Twist = geometry_msgs::msg::TwistStamped;

class RelayController : public controller_interface::ChainableControllerInterface
{
public:
  RelayController();

  controller_interface::InterfaceConfiguration command_interface_configuration() const override;

  controller_interface::InterfaceConfiguration state_interface_configuration() const override;

  controller_interface::CallbackReturn on_init() override;

  controller_interface::CallbackReturn on_configure(
    const rclcpp_lifecycle::State & previous_state) override;

  controller_interface::return_type
  update_reference_from_subscribers(
    const rclcpp::Time & time, const rclcpp::Duration & period) override;

  controller_interface::return_type
  update_and_write_commands(const rclcpp::Time & time, const rclcpp::Duration & period) override;

  bool on_set_chained_mode(bool chained_mode) override;

  std::vector<hardware_interface::CommandInterface> on_export_reference_interfaces() override;

protected:
  rclcpp::Subscription<Twist>::SharedPtr twist_subscriber_ = nullptr;
  realtime_tools::RealtimeBox<std::shared_ptr<Twist>> last_msg_ptr_{nullptr};

  std::shared_ptr<ParamListener> param_listener_;
  Params params_;
};
}  // namespace twist_relay_controller

#endif  // TWIST_RELAY_CONTROLLER__TWIST_RELAY_CONTROLLER_HPP_
